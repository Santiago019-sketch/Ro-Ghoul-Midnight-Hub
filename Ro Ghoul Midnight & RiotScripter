-- Load GUI
local gui = loadstring(game:HttpGetAsync("https://raw.githubusercontent.com/z4gs/scripts/master/testtttt.lua"))():AddWindow("Ro-Ghoul", {
    main_color = Color3.fromRGB(0,0,0),
    min_size = Vector2.new(373, 340),
    can_resize = false
})

-- Initialize Services and Variables
local get = setmetatable({}, {
    __index = function(a, b)
        return game:GetService(b) or game[b]
    end
})

local player = get.Players.LocalPlayer
local camera = workspace.CurrentCamera

local remotes = get.ReplicatedStorage.Remotes
local myData = loadstring(game:HttpGet("https://raw.githubusercontent.com/z4gs/scripts/master/Settings.lua"))()("Ro-Ghoul Autofarm", {
    Skills = {E = false, F = false, C = false, R = false},
    Boss = {
        ["Gyakusatsu"] = false,
        ["Eto Yoshimura"] = false,
        ["Koutarou Amon"] = false,
        ["Nishiki Nishio"] = false
    },
    DistanceFromNpc = 5,
    DistanceFromBoss = 8,
    TeleportSpeed = 150,
    ReputationFarm = false,
    ReputationCashout = false,
    AutoKickWhitelist = ""
})

local array = {
    boss = {
        ["Gyakusatsu"] = 1250,
        ["Eto Yoshimura"] = 1250,
        ["Koutarou Amon"] = 750,
        ["Nishiki Nishio"] = 250
    },
    npcs = {["Aogiri Members"] = "GhoulSpawns", Investigators = "CCGSpawns", Humans = "HumanSpawns"},
    stages = {"One", "Two", "Three", "Four", "Five", "Six"},
    skills = {
        E = player.PlayerFolder.Special1CD,
        F = player.PlayerFolder.Special3CD,
        C = player.PlayerFolder.SpecialBonusCD,
        R = player.PlayerFolder.Special2CD
    }
}

local labels = {}

-- Define Labels
labels = setmetatable({
    text = {label = gui:AddLabel("")},
    tfarm = {label = gui:AddLabel("")},
    space = {label = gui:AddLabel("")},
    Quest = {prefix = "Current Quest: ", label = gui:AddLabel("Current Quest: None")},
    Yen = {prefix = "Yen: ", label = gui:AddLabel("Yen: 0"), value = 0, oldval = player.PlayerFolder.Stats.Yen.Value},
    RC = {prefix = "RC: ", label = gui:AddLabel("RC: 0"), value = 0, oldval = player.PlayerFolder.Stats.RC.Value},
    Kills = {prefix = "Kills: ", label = gui:AddLabel("Kills: 0"), value = 0} 
}, {
    __call = function(self, typ, newv, oldv)
        if typ and newv then
            local object = self[typ]
            if type(newv) == "number" then
                object.value = object.value + newv
                object.label.Text = object.prefix..format(object.value)
                if oldv then
                    object.oldval = oldv
                end
            elseif object.prefix then
                object.label.Text = object.prefix..newv
            else
                object.label.Text = newv
            end
        else
            for i,v in pairs(labels) do
                v.value = 0
                v.label.Text = v.prefix.."0"
            end
        end
    end
})

-- Format Function
local function format(number)
    local i, k, j = tostring(number):match("(%-?%d?)(%d*)(%.?.*)")
    return i..k:reverse():gsub("(%d%d%d)", "%1,"):reverse()..j
end

-- TP Function
local function tp(pos)
    local val = Instance.new("CFrameValue")
    val.Value = player.Character.HumanoidRootPart.CFrame

    local tween = game:GetService("TweenService"):Create(
        val,
        TweenInfo.new((player.Character.HumanoidRootPart.Position - pos.p).magnitude / myData.TeleportSpeed, Enum.EasingStyle.Linear, Enum.EasingDirection.Out, 0, false, 0),
        {Value = pos}
    )

    tween:Play()
    tween.Completed:Wait()
    player.Character.HumanoidRootPart.CFrame = val.Value
    val:Destroy()
end

-- Autofarm Logic
while true do
    if array.autofarm then
        pcall(function()
            local npc = getNPC()
            if npc then
                tp(npc.HumanoidRootPart.CFrame + npc.HumanoidRootPart.CFrame.lookVector * myData.DistanceFromNpc)
                labels("text", "Killing: "..npc.Name)
            else
                labels("text", "No target found, waiting...")
            end
        end)
    end
    wait(1)
end
